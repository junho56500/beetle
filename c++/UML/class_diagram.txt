UML Class Diagram

01. 상속 (Inheritance)

02. 인터페이스 구현 (Interface Implimentation)

03. 연관 (Association)
한 클래스가 다른 클래스를 사용한다. 
때문에 두 클래스 사이의life time은 전혀 상관이 없다. 
각각 독립적으로 생성되고연결이 될 수도, 연결이 되지 않을 수도 있다.

ex)class Car --------- class Personclass 

Car {
private:
    Person person;
public:
    setPerson(Person _p){
        this.person = _p;   // setPerson 메소드를 호출해서 사용
    }
}


04. 집합 (Aggregation)
Aggregation 관계로 표현되는 전체 객체의 생성 시기가꼭 동일할 필요는 없다. 
소멸시에도 Aggregatin 관계의클래스들이 다른 객체에 의해 공유될 수도 있다.

ex)class Car <>------------ class Engineclass 

Car{
private:
    Engine engine;
public:
    Car(Engine _e){
        this.engine = _e;   // 생성자의 매개 변수로 들어온 놈이
                            // 꼭 Car과 같이 생성될 필요는 없으며
                            // 외부에서 생성된 Engine은 다른 객체에서도
                            // 사용되고 있을 수도 있다.
    }
};


05. 구성 (Composition)객체의 생성과 소멸 시기가 동일하다.
즉 Car 클래스 생성자 내에서 Engine 클래스를 생성한다.

ex)class Car <<>>------------- class Engineclass 

Car{
private:
    Engine engine;
public:
    Car(...){
        this.engine = new Engine( ... );
    }
};


06. 의존 (Dependency)객체의 생성과 소멸 시기와는 연관이 없다. 

ex)Car - - - - - - - - - > Airconclass

Car{
    ...
public:
    void Air( Aircon con){
        con.turnOn();   // Aircon 클래스를 인자로 받아 메소드를 내부적으로 호출한다.
                        // Aircon 의 turnOn 의 정의가 바뀌면
                        // Car 에 영향을 주게 되므로 의존 관계에 있다고 말한다.
    }
};
